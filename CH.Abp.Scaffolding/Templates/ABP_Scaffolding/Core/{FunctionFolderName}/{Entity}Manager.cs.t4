<#@ template language="C#" HostSpecific="True" Debug="Flase" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="CH.Abp.Scaffolding.Models" #>
<#@ parameter type="System.String" name="ProjectNamespace" #>
<#@ parameter type="System.String" name="ModuleNamespace" #>
<#@ parameter type="System.String" name="ModuleName" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ parameter type="System.String" name="FunctionName" #>
<#@ parameter type="System.String" name="MenuName" #>
<#@ parameter type="System.Boolean" name="GenerateTwoCol" #>
<#@ parameter type="System.Boolean" name="AllowBatchDelete" #>
<#@ parameter type="System.Boolean" name="IsDisplayOrderable" #>
<#@ parameter type="System.String" name="ProjectName" #>
<#@ parameter type="CH.Abp.Scaffolding.Models.MetaTableInfo" name="DtoMetaTable" #>
<#@ Include File="../../CSharpHelpers.t4" #>
<#@ output extension="cs" #>
<#
    var entityName = ToCamelCase(EntityName);
	 var moduleName = ToCamelCase(ModuleName);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Abp.Configuration;
using Abp.Dependency;
using Abp.Domain.Uow;
using Abp.Runtime.Caching;
using CH.Spartan.Domain;

namespace <#= ModuleNamespace #>
{
    public class <#= EntityName #>Manager : <#= ProjectName #>ManagerBase<<#= EntityName #>>
    {
        public <#= EntityName #>Manager(
            <#= EntityName #>Store <#= entityName #>Store, 
            ISettingManager settingManager, 
            ICacheManager cacheManager, 
            IIocResolver iocResolver, 
            IUnitOfWorkManager unitOfWorkManager) 
			: base(<#= entityName #>Store, settingManager, cacheManager, iocResolver, unitOfWorkManager)
        {
        }
    }
}